// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sog8262LcebSfK4tonEqFh
// Component: yADmOGOzIX
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_aker_academy.module.css"; // plasmic-import: sog8262LcebSfK4tonEqFh/projectcss
import sty from "./PlasmicNotificationsPanel.module.css"; // plasmic-import: yADmOGOzIX/css

import Icons8RightsvgIcon from "./icons/PlasmicIcon__Icons8Rightsvg"; // plasmic-import: FI8EfdS2o/icon

export type PlasmicNotificationsPanel__VariantMembers = {};

export type PlasmicNotificationsPanel__VariantsArgs = {};
type VariantPropType = keyof PlasmicNotificationsPanel__VariantsArgs;
export const PlasmicNotificationsPanel__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNotificationsPanel__ArgsType = {};
type ArgPropType = keyof PlasmicNotificationsPanel__ArgsType;
export const PlasmicNotificationsPanel__ArgProps = new Array<ArgPropType>();

export type PlasmicNotificationsPanel__OverridesType = {
  notificationsPanel?: p.Flex<"div">;
  notificationsPanelHeader?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  svg?: p.Flex<"svg">;
  notificationsPanelBody?: p.Flex<"div">;
  notificationsPanelSection?: p.Flex<"div">;
  notificationsPanelSectionHeading?: p.Flex<"div">;
  notificationsPanelSectionHeadingLeft?: p.Flex<"div">;
  notificationsPanelSectionHeadingTitle?: p.Flex<"div">;
  notificationsPanelSectionHeadingRight?: p.Flex<"div">;
};

export interface DefaultNotificationsPanelProps {
  className?: string;
}

function PlasmicNotificationsPanel__RenderFunc(props: {
  variants: PlasmicNotificationsPanel__VariantsArgs;
  args: PlasmicNotificationsPanel__ArgsType;
  overrides: PlasmicNotificationsPanel__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <div
      data-plasmic-name={"notificationsPanel"}
      data-plasmic-override={overrides.notificationsPanel}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.notificationsPanel
      )}
    >
      <div
        data-plasmic-name={"notificationsPanelHeader"}
        data-plasmic-override={overrides.notificationsPanelHeader}
        className={classNames(projectcss.all, sty.notificationsPanelHeader)}
      >
        <p.PlasmicLink
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          platform={"nextjs"}
        >
          <Icons8RightsvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </p.PlasmicLink>
      </div>

      <div
        data-plasmic-name={"notificationsPanelBody"}
        data-plasmic-override={overrides.notificationsPanelBody}
        className={classNames(projectcss.all, sty.notificationsPanelBody)}
      >
        <div
          data-plasmic-name={"notificationsPanelSection"}
          data-plasmic-override={overrides.notificationsPanelSection}
          className={classNames(projectcss.all, sty.notificationsPanelSection)}
        >
          <div
            data-plasmic-name={"notificationsPanelSectionHeading"}
            data-plasmic-override={overrides.notificationsPanelSectionHeading}
            className={classNames(
              projectcss.all,
              sty.notificationsPanelSectionHeading
            )}
          >
            <div
              data-plasmic-name={"notificationsPanelSectionHeadingLeft"}
              data-plasmic-override={
                overrides.notificationsPanelSectionHeadingLeft
              }
              className={classNames(
                projectcss.all,
                sty.notificationsPanelSectionHeadingLeft
              )}
            />

            <div
              data-plasmic-name={"notificationsPanelSectionHeadingTitle"}
              data-plasmic-override={
                overrides.notificationsPanelSectionHeadingTitle
              }
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.notificationsPanelSectionHeadingTitle
              )}
            >
              {"New"}
            </div>

            <div
              data-plasmic-name={"notificationsPanelSectionHeadingRight"}
              data-plasmic-override={
                overrides.notificationsPanelSectionHeadingRight
              }
              className={classNames(
                projectcss.all,
                sty.notificationsPanelSectionHeadingRight
              )}
            />
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  notificationsPanel: [
    "notificationsPanel",
    "notificationsPanelHeader",
    "link",
    "svg",
    "notificationsPanelBody",
    "notificationsPanelSection",
    "notificationsPanelSectionHeading",
    "notificationsPanelSectionHeadingLeft",
    "notificationsPanelSectionHeadingTitle",
    "notificationsPanelSectionHeadingRight"
  ],
  notificationsPanelHeader: ["notificationsPanelHeader", "link", "svg"],
  link: ["link", "svg"],
  svg: ["svg"],
  notificationsPanelBody: [
    "notificationsPanelBody",
    "notificationsPanelSection",
    "notificationsPanelSectionHeading",
    "notificationsPanelSectionHeadingLeft",
    "notificationsPanelSectionHeadingTitle",
    "notificationsPanelSectionHeadingRight"
  ],
  notificationsPanelSection: [
    "notificationsPanelSection",
    "notificationsPanelSectionHeading",
    "notificationsPanelSectionHeadingLeft",
    "notificationsPanelSectionHeadingTitle",
    "notificationsPanelSectionHeadingRight"
  ],
  notificationsPanelSectionHeading: [
    "notificationsPanelSectionHeading",
    "notificationsPanelSectionHeadingLeft",
    "notificationsPanelSectionHeadingTitle",
    "notificationsPanelSectionHeadingRight"
  ],
  notificationsPanelSectionHeadingLeft: [
    "notificationsPanelSectionHeadingLeft"
  ],
  notificationsPanelSectionHeadingTitle: [
    "notificationsPanelSectionHeadingTitle"
  ],
  notificationsPanelSectionHeadingRight: [
    "notificationsPanelSectionHeadingRight"
  ]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  notificationsPanel: "div";
  notificationsPanelHeader: "div";
  link: "a";
  svg: "svg";
  notificationsPanelBody: "div";
  notificationsPanelSection: "div";
  notificationsPanelSectionHeading: "div";
  notificationsPanelSectionHeadingLeft: "div";
  notificationsPanelSectionHeadingTitle: "div";
  notificationsPanelSectionHeadingRight: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNotificationsPanel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNotificationsPanel__VariantsArgs;
    args?: PlasmicNotificationsPanel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNotificationsPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNotificationsPanel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNotificationsPanel__ArgProps,
      internalVariantPropNames: PlasmicNotificationsPanel__VariantProps
    });

    return PlasmicNotificationsPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "notificationsPanel") {
    func.displayName = "PlasmicNotificationsPanel";
  } else {
    func.displayName = `PlasmicNotificationsPanel.${nodeName}`;
  }
  return func;
}

export const PlasmicNotificationsPanel = Object.assign(
  // Top-level PlasmicNotificationsPanel renders the root element
  makeNodeComponent("notificationsPanel"),
  {
    // Helper components rendering sub-elements
    notificationsPanelHeader: makeNodeComponent("notificationsPanelHeader"),
    link: makeNodeComponent("link"),
    svg: makeNodeComponent("svg"),
    notificationsPanelBody: makeNodeComponent("notificationsPanelBody"),
    notificationsPanelSection: makeNodeComponent("notificationsPanelSection"),
    notificationsPanelSectionHeading: makeNodeComponent(
      "notificationsPanelSectionHeading"
    ),
    notificationsPanelSectionHeadingLeft: makeNodeComponent(
      "notificationsPanelSectionHeadingLeft"
    ),
    notificationsPanelSectionHeadingTitle: makeNodeComponent(
      "notificationsPanelSectionHeadingTitle"
    ),
    notificationsPanelSectionHeadingRight: makeNodeComponent(
      "notificationsPanelSectionHeadingRight"
    ),

    // Metadata about props expected for PlasmicNotificationsPanel
    internalVariantProps: PlasmicNotificationsPanel__VariantProps,
    internalArgProps: PlasmicNotificationsPanel__ArgProps
  }
);

export default PlasmicNotificationsPanel;
/* prettier-ignore-end */
