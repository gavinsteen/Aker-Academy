// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sog8262LcebSfK4tonEqFh
// Component: Bq5HbP3pCG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_aker_academy.module.css"; // plasmic-import: sog8262LcebSfK4tonEqFh/projectcss
import sty from "./PlasmicUnitLink.module.css"; // plasmic-import: Bq5HbP3pCG/css

export type PlasmicUnitLink__VariantMembers = {
  enrolled: "enrolled";
};

export type PlasmicUnitLink__VariantsArgs = {
  enrolled?: SingleBooleanChoiceArg<"enrolled">;
};

type VariantPropType = keyof PlasmicUnitLink__VariantsArgs;
export const PlasmicUnitLink__VariantProps = new Array<VariantPropType>(
  "enrolled"
);

export type PlasmicUnitLink__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicUnitLink__ArgsType;
export const PlasmicUnitLink__ArgProps = new Array<ArgPropType>("children");

export type PlasmicUnitLink__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  text?: p.Flex<"div">;
};

export interface DefaultUnitLinkProps {
  children?: React.ReactNode;
  enrolled?: SingleBooleanChoiceArg<"enrolled">;
  className?: string;
}

function PlasmicUnitLink__RenderFunc(props: {
  variants: PlasmicUnitLink__VariantsArgs;
  args: PlasmicUnitLink__ArgsType;
  overrides: PlasmicUnitLink__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootenrolled]: hasVariant(variants, "enrolled", "enrolled") }
      )}
      component={Link}
      platform={"nextjs"}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__okCUo, {
          [sty.freeBoxenrolled__okCUoXhXFc]: hasVariant(
            variants,
            "enrolled",
            "enrolled"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__cQy7J, {
            [sty.freeBoxenrolled__cQy7JXhXFc]: hasVariant(
              variants,
              "enrolled",
              "enrolled"
            )
          })}
        >
          {(hasVariant(variants, "enrolled", "enrolled") ? true : true) ? (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__fwUbn, {
                [sty.imgenrolled__fwUbnXhXFc]: hasVariant(
                  variants,
                  "enrolled",
                  "enrolled"
                )
              })}
              displayHeight={"24px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"24px" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/aker_academy/images/icons8Padlock48Png.png",
                fullWidth: 48,
                fullHeight: 48,
                aspectRatio: undefined
              }}
            />
          ) : null}
          {(hasVariant(variants, "enrolled", "enrolled") ? true : true) ? (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__esCxb, {
                [sty.imgenrolled__esCxbXhXFc]: hasVariant(
                  variants,
                  "enrolled",
                  "enrolled"
                )
              })}
              displayHeight={"24px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"24px" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/aker_academy/images/icons8SortRight48Png.png",
                fullWidth: 48,
                fullHeight: 48,
                aspectRatio: undefined
              }}
            />
          ) : null}

          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textenrolled]: hasVariant(variants, "enrolled", "enrolled")
              }
            )}
          >
            {"Connecting to EC2 Virtual Machine in AWS"}
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox___9UhaP)}>
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__vJaDc)}
            displayHeight={"24px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"24px" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/aker_academy/images/icons8Time48Png.png",
              fullWidth: 48,
              fullHeight: 48,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(projectcss.all, sty.freeBox__n9P6N, {
              [sty.freeBoxenrolled__n9P6NXhXFc]: hasVariant(
                variants,
                "enrolled",
                "enrolled"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "8:00 min",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrenenrolled]: hasVariant(
                  variants,
                  "enrolled",
                  "enrolled"
                )
              })
            })}
          </div>
        </div>
      </div>
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUnitLink__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUnitLink__VariantsArgs;
    args?: PlasmicUnitLink__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUnitLink__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUnitLink__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUnitLink__ArgProps,
      internalVariantPropNames: PlasmicUnitLink__VariantProps
    });

    return PlasmicUnitLink__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUnitLink";
  } else {
    func.displayName = `PlasmicUnitLink.${nodeName}`;
  }
  return func;
}

export const PlasmicUnitLink = Object.assign(
  // Top-level PlasmicUnitLink renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicUnitLink
    internalVariantProps: PlasmicUnitLink__VariantProps,
    internalArgProps: PlasmicUnitLink__ArgProps
  }
);

export default PlasmicUnitLink;
/* prettier-ignore-end */
