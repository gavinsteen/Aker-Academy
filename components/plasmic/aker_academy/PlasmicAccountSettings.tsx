// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sog8262LcebSfK4tonEqFh
// Component: e31R0xHdqa
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: Nxyr3sFmDS/component
import TextInput from "../../TextInput"; // plasmic-import: HboA_9fv9kn/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_aker_academy.module.css"; // plasmic-import: sog8262LcebSfK4tonEqFh/projectcss
import sty from "./PlasmicAccountSettings.module.css"; // plasmic-import: e31R0xHdqa/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: cSV9Bou7mox/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: g1ioEUoyUBu/icon

export type PlasmicAccountSettings__VariantMembers = {};

export type PlasmicAccountSettings__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccountSettings__VariantsArgs;
export const PlasmicAccountSettings__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAccountSettings__ArgsType = {};
type ArgPropType = keyof PlasmicAccountSettings__ArgsType;
export const PlasmicAccountSettings__ArgProps = new Array<ArgPropType>();

export type PlasmicAccountSettings__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  sectionBanner?: p.Flex<"div">;
  containerAccountHeading?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  freeBox?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  sectionBody?: p.Flex<"div">;
  containerBody?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  field?: p.Flex<"div">;
  fieldLabel?: p.Flex<"div">;
  textInput?: p.Flex<typeof TextInput>;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultAccountSettingsProps {}

function PlasmicAccountSettings__RenderFunc(props: {
  variants: PlasmicAccountSettings__VariantsArgs;
  args: PlasmicAccountSettings__ArgsType;
  overrides: PlasmicAccountSettings__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
            headerSolid={true}
            state={"signedIn" as const}
          />

          <div
            data-plasmic-name={"sectionBanner"}
            data-plasmic-override={overrides.sectionBanner}
            className={classNames(projectcss.all, sty.sectionBanner)}
          >
            <div
              data-plasmic-name={"containerAccountHeading"}
              data-plasmic-override={overrides.containerAccountHeading}
              className={classNames(
                projectcss.all,
                sty.containerAccountHeading
              )}
            >
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"160px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"160px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/aker_academy/images/avatarPlaceholderjpg2.jpeg",
                  fullWidth: 160,
                  fullHeight: 160,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"User Name"}
                </h1>
              </div>
            </div>
          </div>

          <div
            data-plasmic-name={"sectionBody"}
            data-plasmic-override={overrides.sectionBody}
            className={classNames(projectcss.all, sty.sectionBody)}
          >
            <div
              data-plasmic-name={"containerBody"}
              data-plasmic-override={overrides.containerBody}
              className={classNames(projectcss.all, sty.containerBody)}
            >
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2
                )}
              >
                {"Account profile"}
              </h2>

              <div
                data-plasmic-name={"field"}
                data-plasmic-override={overrides.field}
                className={classNames(projectcss.all, sty.field)}
              >
                <div
                  data-plasmic-name={"fieldLabel"}
                  data-plasmic-override={overrides.fieldLabel}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.fieldLabel
                  )}
                >
                  {"Enter some text"}
                </div>

                <TextInput
                  data-plasmic-name={"textInput"}
                  data-plasmic-override={overrides.textInput}
                  className={classNames("__wab_instance", sty.textInput)}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "sectionBanner",
    "containerAccountHeading",
    "img",
    "freeBox",
    "h1",
    "sectionBody",
    "containerBody",
    "h2",
    "field",
    "fieldLabel",
    "textInput",
    "textbox"
  ],
  header: ["header"],
  sectionBanner: [
    "sectionBanner",
    "containerAccountHeading",
    "img",
    "freeBox",
    "h1"
  ],
  containerAccountHeading: ["containerAccountHeading", "img", "freeBox", "h1"],
  img: ["img"],
  freeBox: ["freeBox", "h1"],
  h1: ["h1"],
  sectionBody: [
    "sectionBody",
    "containerBody",
    "h2",
    "field",
    "fieldLabel",
    "textInput",
    "textbox"
  ],
  containerBody: [
    "containerBody",
    "h2",
    "field",
    "fieldLabel",
    "textInput",
    "textbox"
  ],
  h2: ["h2"],
  field: ["field", "fieldLabel", "textInput", "textbox"],
  fieldLabel: ["fieldLabel"],
  textInput: ["textInput", "textbox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  sectionBanner: "div";
  containerAccountHeading: "div";
  img: typeof p.PlasmicImg;
  freeBox: "div";
  h1: "h1";
  sectionBody: "div";
  containerBody: "div";
  h2: "h2";
  field: "div";
  fieldLabel: "div";
  textInput: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccountSettings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccountSettings__VariantsArgs;
    args?: PlasmicAccountSettings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccountSettings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAccountSettings__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAccountSettings__ArgProps,
      internalVariantPropNames: PlasmicAccountSettings__VariantProps
    });

    return PlasmicAccountSettings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccountSettings";
  } else {
    func.displayName = `PlasmicAccountSettings.${nodeName}`;
  }
  return func;
}

export const PlasmicAccountSettings = Object.assign(
  // Top-level PlasmicAccountSettings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    sectionBanner: makeNodeComponent("sectionBanner"),
    containerAccountHeading: makeNodeComponent("containerAccountHeading"),
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    sectionBody: makeNodeComponent("sectionBody"),
    containerBody: makeNodeComponent("containerBody"),
    h2: makeNodeComponent("h2"),
    field: makeNodeComponent("field"),
    fieldLabel: makeNodeComponent("fieldLabel"),
    textInput: makeNodeComponent("textInput"),

    // Metadata about props expected for PlasmicAccountSettings
    internalVariantProps: PlasmicAccountSettings__VariantProps,
    internalArgProps: PlasmicAccountSettings__ArgProps
  }
);

export default PlasmicAccountSettings;
/* prettier-ignore-end */
