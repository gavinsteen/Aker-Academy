// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sog8262LcebSfK4tonEqFh
// Component: e31R0xHdqa
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: Nxyr3sFmDS/component
import ButtonOutlined from "../../ButtonOutlined"; // plasmic-import: 2KszG0-KPy/component
import TextInput from "../../TextInput"; // plasmic-import: HboA_9fv9kn/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_aker_academy.module.css"; // plasmic-import: sog8262LcebSfK4tonEqFh/projectcss
import sty from "./PlasmicAccountSettings.module.css"; // plasmic-import: e31R0xHdqa/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: cSV9Bou7mox/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: g1ioEUoyUBu/icon

export type PlasmicAccountSettings__VariantMembers = {};

export type PlasmicAccountSettings__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccountSettings__VariantsArgs;
export const PlasmicAccountSettings__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAccountSettings__ArgsType = {};
type ArgPropType = keyof PlasmicAccountSettings__ArgsType;
export const PlasmicAccountSettings__ArgProps = new Array<ArgPropType>();

export type PlasmicAccountSettings__OverridesType = {
  root?: p.Flex<"div">;
  sectionBanner?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  containerAccountHeading?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  freeBox?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  sectionBody?: p.Flex<"div">;
  containerBody?: p.Flex<"div">;
  accountSettingsForm?: p.Flex<"div">;
  fieldPhoto?: p.Flex<"div">;
  fieldLabelPhot?: p.Flex<"div">;
  fieldHelpText?: p.Flex<"div">;
  buttonOutlined?: p.Flex<typeof ButtonOutlined>;
  fieldFirstName?: p.Flex<"div">;
  fieldLabelFirstName?: p.Flex<"div">;
  fieldLastName?: p.Flex<"div">;
  fieldLabelLastName?: p.Flex<"div">;
  fieldEmail?: p.Flex<"div">;
  fieldLabelEmail?: p.Flex<"div">;
  fieldPassword?: p.Flex<"div">;
  fieldLabelFirstName4?: p.Flex<"div">;
  fieldHelpText2?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  text?: p.Flex<"div">;
};

export interface DefaultAccountSettingsProps {}

function PlasmicAccountSettings__RenderFunc(props: {
  variants: PlasmicAccountSettings__VariantsArgs;
  args: PlasmicAccountSettings__ArgsType;
  overrides: PlasmicAccountSettings__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"sectionBanner"}
            data-plasmic-override={overrides.sectionBanner}
            className={classNames(projectcss.all, sty.sectionBanner)}
          >
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
              state={"signedIn" as const}
            />

            <div
              data-plasmic-name={"containerAccountHeading"}
              data-plasmic-override={overrides.containerAccountHeading}
              className={classNames(
                projectcss.all,
                sty.containerAccountHeading
              )}
            >
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"160px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"160px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/aker_academy/images/avatarPlaceholderjpg2.jpeg",
                  fullWidth: 160,
                  fullHeight: 160,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"User Name"}
                </h1>
              </div>
            </div>
          </div>

          <div
            data-plasmic-name={"sectionBody"}
            data-plasmic-override={overrides.sectionBody}
            className={classNames(projectcss.all, sty.sectionBody)}
          >
            <div
              data-plasmic-name={"containerBody"}
              data-plasmic-override={overrides.containerBody}
              className={classNames(projectcss.all, sty.containerBody)}
            >
              <div
                data-plasmic-name={"accountSettingsForm"}
                data-plasmic-override={overrides.accountSettingsForm}
                className={classNames(projectcss.all, sty.accountSettingsForm)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__z3Rpp
                  )}
                >
                  {"Account profile"}
                </h2>

                <div
                  data-plasmic-name={"fieldPhoto"}
                  data-plasmic-override={overrides.fieldPhoto}
                  className={classNames(projectcss.all, sty.fieldPhoto)}
                >
                  <div
                    data-plasmic-name={"fieldLabelPhot"}
                    data-plasmic-override={overrides.fieldLabelPhot}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.fieldLabelPhot
                    )}
                  >
                    {"Profile photo"}
                  </div>

                  <div
                    data-plasmic-name={"fieldHelpText"}
                    data-plasmic-override={overrides.fieldHelpText}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.fieldHelpText
                    )}
                  >
                    {"Minimum size 160 x 160px"}
                  </div>

                  <ButtonOutlined
                    data-plasmic-name={"buttonOutlined"}
                    data-plasmic-override={overrides.buttonOutlined}
                    className={classNames("__wab_instance", sty.buttonOutlined)}
                  >
                    {"Select image"}
                  </ButtonOutlined>
                </div>

                <div
                  data-plasmic-name={"fieldFirstName"}
                  data-plasmic-override={overrides.fieldFirstName}
                  className={classNames(projectcss.all, sty.fieldFirstName)}
                >
                  <div
                    data-plasmic-name={"fieldLabelFirstName"}
                    data-plasmic-override={overrides.fieldLabelFirstName}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.fieldLabelFirstName
                    )}
                  >
                    {"First name"}
                  </div>

                  <TextInput
                    className={classNames(
                      "__wab_instance",
                      sty.textInput__svEuK
                    )}
                    placeholder={"" as const}
                  />
                </div>

                <div
                  data-plasmic-name={"fieldLastName"}
                  data-plasmic-override={overrides.fieldLastName}
                  className={classNames(projectcss.all, sty.fieldLastName)}
                >
                  <div
                    data-plasmic-name={"fieldLabelLastName"}
                    data-plasmic-override={overrides.fieldLabelLastName}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.fieldLabelLastName
                    )}
                  >
                    {"Last name"}
                  </div>

                  <TextInput
                    className={classNames(
                      "__wab_instance",
                      sty.textInput__qpsrh
                    )}
                    placeholder={"" as const}
                  />
                </div>

                <div
                  data-plasmic-name={"fieldEmail"}
                  data-plasmic-override={overrides.fieldEmail}
                  className={classNames(projectcss.all, sty.fieldEmail)}
                >
                  <div
                    data-plasmic-name={"fieldLabelEmail"}
                    data-plasmic-override={overrides.fieldLabelEmail}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.fieldLabelEmail
                    )}
                  >
                    {"Email"}
                  </div>

                  <TextInput
                    className={classNames(
                      "__wab_instance",
                      sty.textInput__jKq13
                    )}
                    placeholder={"" as const}
                  />
                </div>

                <div
                  data-plasmic-name={"fieldPassword"}
                  data-plasmic-override={overrides.fieldPassword}
                  className={classNames(projectcss.all, sty.fieldPassword)}
                >
                  <div
                    data-plasmic-name={"fieldLabelFirstName4"}
                    data-plasmic-override={overrides.fieldLabelFirstName4}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.fieldLabelFirstName4
                    )}
                  >
                    {"Password"}
                  </div>

                  <div
                    data-plasmic-name={"fieldHelpText2"}
                    data-plasmic-override={overrides.fieldHelpText2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.fieldHelpText2
                    )}
                  >
                    {"Minimum 8 characters"}
                  </div>

                  <TextInput
                    className={classNames(
                      "__wab_instance",
                      sty.textInput__loWjX
                    )}
                    defaultValue={"XXXXXX" as const}
                    isDisabled={true}
                    placeholder={"" as const}
                  />
                </div>

                <p.PlasmicLink
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(projectcss.all, projectcss.a, sty.link)}
                  component={Link}
                  platform={"nextjs"}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Change password"}
                  </div>
                </p.PlasmicLink>

                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__pEsSa
                  )}
                >
                  {"Communication preferences"}
                </h2>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionBanner",
    "header",
    "containerAccountHeading",
    "img",
    "freeBox",
    "h1",
    "sectionBody",
    "containerBody",
    "accountSettingsForm",
    "fieldPhoto",
    "fieldLabelPhot",
    "fieldHelpText",
    "buttonOutlined",
    "fieldFirstName",
    "fieldLabelFirstName",
    "fieldLastName",
    "fieldLabelLastName",
    "fieldEmail",
    "fieldLabelEmail",
    "fieldPassword",
    "fieldLabelFirstName4",
    "fieldHelpText2",
    "link",
    "text"
  ],
  sectionBanner: [
    "sectionBanner",
    "header",
    "containerAccountHeading",
    "img",
    "freeBox",
    "h1"
  ],
  header: ["header"],
  containerAccountHeading: ["containerAccountHeading", "img", "freeBox", "h1"],
  img: ["img"],
  freeBox: ["freeBox", "h1"],
  h1: ["h1"],
  sectionBody: [
    "sectionBody",
    "containerBody",
    "accountSettingsForm",
    "fieldPhoto",
    "fieldLabelPhot",
    "fieldHelpText",
    "buttonOutlined",
    "fieldFirstName",
    "fieldLabelFirstName",
    "fieldLastName",
    "fieldLabelLastName",
    "fieldEmail",
    "fieldLabelEmail",
    "fieldPassword",
    "fieldLabelFirstName4",
    "fieldHelpText2",
    "link",
    "text"
  ],
  containerBody: [
    "containerBody",
    "accountSettingsForm",
    "fieldPhoto",
    "fieldLabelPhot",
    "fieldHelpText",
    "buttonOutlined",
    "fieldFirstName",
    "fieldLabelFirstName",
    "fieldLastName",
    "fieldLabelLastName",
    "fieldEmail",
    "fieldLabelEmail",
    "fieldPassword",
    "fieldLabelFirstName4",
    "fieldHelpText2",
    "link",
    "text"
  ],
  accountSettingsForm: [
    "accountSettingsForm",
    "fieldPhoto",
    "fieldLabelPhot",
    "fieldHelpText",
    "buttonOutlined",
    "fieldFirstName",
    "fieldLabelFirstName",
    "fieldLastName",
    "fieldLabelLastName",
    "fieldEmail",
    "fieldLabelEmail",
    "fieldPassword",
    "fieldLabelFirstName4",
    "fieldHelpText2",
    "link",
    "text"
  ],
  fieldPhoto: [
    "fieldPhoto",
    "fieldLabelPhot",
    "fieldHelpText",
    "buttonOutlined"
  ],
  fieldLabelPhot: ["fieldLabelPhot"],
  fieldHelpText: ["fieldHelpText"],
  buttonOutlined: ["buttonOutlined"],
  fieldFirstName: ["fieldFirstName", "fieldLabelFirstName"],
  fieldLabelFirstName: ["fieldLabelFirstName"],
  fieldLastName: ["fieldLastName", "fieldLabelLastName"],
  fieldLabelLastName: ["fieldLabelLastName"],
  fieldEmail: ["fieldEmail", "fieldLabelEmail"],
  fieldLabelEmail: ["fieldLabelEmail"],
  fieldPassword: ["fieldPassword", "fieldLabelFirstName4", "fieldHelpText2"],
  fieldLabelFirstName4: ["fieldLabelFirstName4"],
  fieldHelpText2: ["fieldHelpText2"],
  link: ["link", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionBanner: "div";
  header: typeof Header;
  containerAccountHeading: "div";
  img: typeof p.PlasmicImg;
  freeBox: "div";
  h1: "h1";
  sectionBody: "div";
  containerBody: "div";
  accountSettingsForm: "div";
  fieldPhoto: "div";
  fieldLabelPhot: "div";
  fieldHelpText: "div";
  buttonOutlined: typeof ButtonOutlined;
  fieldFirstName: "div";
  fieldLabelFirstName: "div";
  fieldLastName: "div";
  fieldLabelLastName: "div";
  fieldEmail: "div";
  fieldLabelEmail: "div";
  fieldPassword: "div";
  fieldLabelFirstName4: "div";
  fieldHelpText2: "div";
  link: "a";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccountSettings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccountSettings__VariantsArgs;
    args?: PlasmicAccountSettings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccountSettings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAccountSettings__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAccountSettings__ArgProps,
      internalVariantPropNames: PlasmicAccountSettings__VariantProps
    });

    return PlasmicAccountSettings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccountSettings";
  } else {
    func.displayName = `PlasmicAccountSettings.${nodeName}`;
  }
  return func;
}

export const PlasmicAccountSettings = Object.assign(
  // Top-level PlasmicAccountSettings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionBanner: makeNodeComponent("sectionBanner"),
    header: makeNodeComponent("header"),
    containerAccountHeading: makeNodeComponent("containerAccountHeading"),
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    sectionBody: makeNodeComponent("sectionBody"),
    containerBody: makeNodeComponent("containerBody"),
    accountSettingsForm: makeNodeComponent("accountSettingsForm"),
    fieldPhoto: makeNodeComponent("fieldPhoto"),
    fieldLabelPhot: makeNodeComponent("fieldLabelPhot"),
    fieldHelpText: makeNodeComponent("fieldHelpText"),
    buttonOutlined: makeNodeComponent("buttonOutlined"),
    fieldFirstName: makeNodeComponent("fieldFirstName"),
    fieldLabelFirstName: makeNodeComponent("fieldLabelFirstName"),
    fieldLastName: makeNodeComponent("fieldLastName"),
    fieldLabelLastName: makeNodeComponent("fieldLabelLastName"),
    fieldEmail: makeNodeComponent("fieldEmail"),
    fieldLabelEmail: makeNodeComponent("fieldLabelEmail"),
    fieldPassword: makeNodeComponent("fieldPassword"),
    fieldLabelFirstName4: makeNodeComponent("fieldLabelFirstName4"),
    fieldHelpText2: makeNodeComponent("fieldHelpText2"),
    link: makeNodeComponent("link"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicAccountSettings
    internalVariantProps: PlasmicAccountSettings__VariantProps,
    internalArgProps: PlasmicAccountSettings__ArgProps
  }
);

export default PlasmicAccountSettings;
/* prettier-ignore-end */
