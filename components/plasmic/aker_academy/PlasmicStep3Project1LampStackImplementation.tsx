// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sog8262LcebSfK4tonEqFh
// Component: 6Y659n9eOk8
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: Nxyr3sFmDS/component
import PageHeading from "../../PageHeading"; // plasmic-import: XPfe-LECZQ/component
import ActivitySubNavigation from "../../ActivitySubNavigation"; // plasmic-import: wjbmsNY1FAt/component
import Button from "../../Button"; // plasmic-import: SpJlpkBmbsK/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_aker_academy.module.css"; // plasmic-import: sog8262LcebSfK4tonEqFh/projectcss
import sty from "./PlasmicStep3Project1LampStackImplementation.module.css"; // plasmic-import: 6Y659n9eOk8/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: g1ioEUoyUBu/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: UiMMPgDsW7t/icon

export type PlasmicStep3Project1LampStackImplementation__VariantMembers = {
  enrolled: "enrolled";
};

export type PlasmicStep3Project1LampStackImplementation__VariantsArgs = {
  enrolled?: SingleBooleanChoiceArg<"enrolled">;
};

type VariantPropType =
  keyof PlasmicStep3Project1LampStackImplementation__VariantsArgs;
export const PlasmicStep3Project1LampStackImplementation__VariantProps =
  new Array<VariantPropType>("enrolled");

export type PlasmicStep3Project1LampStackImplementation__ArgsType = {};
type ArgPropType = keyof PlasmicStep3Project1LampStackImplementation__ArgsType;
export const PlasmicStep3Project1LampStackImplementation__ArgProps =
  new Array<ArgPropType>();

export type PlasmicStep3Project1LampStackImplementation__OverridesType = {
  root?: p.Flex<"div">;
  sectionHero?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  pageHeading?: p.Flex<typeof PageHeading>;
  h1?: p.Flex<"h1">;
  text?: p.Flex<"div">;
  activitySubNavigation?: p.Flex<typeof ActivitySubNavigation>;
  sectionBody?: p.Flex<"div">;
  containerProjectDetails?: p.Flex<"div">;
  buttonRow?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultStep3Project1LampStackImplementationProps {}

function PlasmicStep3Project1LampStackImplementation__RenderFunc(props: {
  variants: PlasmicStep3Project1LampStackImplementation__VariantsArgs;
  args: PlasmicStep3Project1LampStackImplementation__ArgsType;
  overrides: PlasmicStep3Project1LampStackImplementation__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            { [sty.rootenrolled]: hasVariant(variants, "enrolled", "enrolled") }
          )}
        >
          <div
            data-plasmic-name={"sectionHero"}
            data-plasmic-override={overrides.sectionHero}
            className={classNames(projectcss.all, sty.sectionHero)}
          >
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__uJPv9)}>
              <div className={classNames(projectcss.all, sty.freeBox__mI9RA)}>
                <PageHeading
                  data-plasmic-name={"pageHeading"}
                  data-plasmic-override={overrides.pageHeading}
                  className={classNames("__wab_instance", sty.pageHeading)}
                  slot={
                    true ? (
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        {"Lessons 1 -2"}
                      </div>
                    ) : null
                  }
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Project 1 - LAMP stack implementation"}
                  </h1>
                </PageHeading>
              </div>
            </div>
          </div>

          {true ? (
            <ActivitySubNavigation
              data-plasmic-name={"activitySubNavigation"}
              data-plasmic-override={overrides.activitySubNavigation}
              className={classNames(
                "__wab_instance",
                sty.activitySubNavigation
              )}
            />
          ) : null}

          <div
            data-plasmic-name={"sectionBody"}
            data-plasmic-override={overrides.sectionBody}
            className={classNames(projectcss.all, sty.sectionBody)}
          >
            <div
              data-plasmic-name={"containerProjectDetails"}
              data-plasmic-override={overrides.containerProjectDetails}
              className={classNames(
                projectcss.all,
                sty.containerProjectDetails
              )}
            >
              <div
                data-plasmic-name={"buttonRow"}
                data-plasmic-override={overrides.buttonRow}
                className={classNames(projectcss.all, sty.buttonRow)}
              >
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                >
                  {"Mark as complete"}
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionHero",
    "header",
    "pageHeading",
    "h1",
    "text",
    "activitySubNavigation",
    "sectionBody",
    "containerProjectDetails",
    "buttonRow",
    "button"
  ],
  sectionHero: ["sectionHero", "header", "pageHeading", "h1", "text"],
  header: ["header"],
  pageHeading: ["pageHeading", "h1", "text"],
  h1: ["h1"],
  text: ["text"],
  activitySubNavigation: ["activitySubNavigation"],
  sectionBody: [
    "sectionBody",
    "containerProjectDetails",
    "buttonRow",
    "button"
  ],
  containerProjectDetails: ["containerProjectDetails", "buttonRow", "button"],
  buttonRow: ["buttonRow", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionHero: "div";
  header: typeof Header;
  pageHeading: typeof PageHeading;
  h1: "h1";
  text: "div";
  activitySubNavigation: typeof ActivitySubNavigation;
  sectionBody: "div";
  containerProjectDetails: "div";
  buttonRow: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStep3Project1LampStackImplementation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStep3Project1LampStackImplementation__VariantsArgs;
    args?: PlasmicStep3Project1LampStackImplementation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicStep3Project1LampStackImplementation__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<
      PlasmicStep3Project1LampStackImplementation__ArgsType,
      ReservedPropsType
    > &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames:
        PlasmicStep3Project1LampStackImplementation__ArgProps,
      internalVariantPropNames:
        PlasmicStep3Project1LampStackImplementation__VariantProps
    });

    return PlasmicStep3Project1LampStackImplementation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStep3Project1LampStackImplementation";
  } else {
    func.displayName = `PlasmicStep3Project1LampStackImplementation.${nodeName}`;
  }
  return func;
}

export const PlasmicStep3Project1LampStackImplementation = Object.assign(
  // Top-level PlasmicStep3Project1LampStackImplementation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionHero: makeNodeComponent("sectionHero"),
    header: makeNodeComponent("header"),
    pageHeading: makeNodeComponent("pageHeading"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    activitySubNavigation: makeNodeComponent("activitySubNavigation"),
    sectionBody: makeNodeComponent("sectionBody"),
    containerProjectDetails: makeNodeComponent("containerProjectDetails"),
    buttonRow: makeNodeComponent("buttonRow"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicStep3Project1LampStackImplementation
    internalVariantProps:
      PlasmicStep3Project1LampStackImplementation__VariantProps,
    internalArgProps: PlasmicStep3Project1LampStackImplementation__ArgProps
  }
);

export default PlasmicStep3Project1LampStackImplementation;
/* prettier-ignore-end */
