// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sog8262LcebSfK4tonEqFh
// Component: wjbmsNY1FAt
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantswYcoTSnfjowKk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: WYcoTSnfjowKK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_aker_academy.module.css"; // plasmic-import: sog8262LcebSfK4tonEqFh/projectcss
import sty from "./PlasmicActivitySubNavigation.module.css"; // plasmic-import: wjbmsNY1FAt/css

export type PlasmicActivitySubNavigation__VariantMembers = {
  adminUserView: "adminUserView";
  discussionsDeactivated: "discussionsDeactivated";
  noSubNavigation: "noSubNavigation";
};

export type PlasmicActivitySubNavigation__VariantsArgs = {
  adminUserView?: SingleBooleanChoiceArg<"adminUserView">;
  discussionsDeactivated?: SingleBooleanChoiceArg<"discussionsDeactivated">;
  noSubNavigation?: SingleBooleanChoiceArg<"noSubNavigation">;
};

type VariantPropType = keyof PlasmicActivitySubNavigation__VariantsArgs;
export const PlasmicActivitySubNavigation__VariantProps =
  new Array<VariantPropType>(
    "adminUserView",
    "discussionsDeactivated",
    "noSubNavigation"
  );

export type PlasmicActivitySubNavigation__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicActivitySubNavigation__ArgsType;
export const PlasmicActivitySubNavigation__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicActivitySubNavigation__OverridesType = {
  root?: p.Flex<"div">;
  subNavBar?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultActivitySubNavigationProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  adminUserView?: SingleBooleanChoiceArg<"adminUserView">;
  discussionsDeactivated?: SingleBooleanChoiceArg<"discussionsDeactivated">;
  noSubNavigation?: SingleBooleanChoiceArg<"noSubNavigation">;
  className?: string;
}

function PlasmicActivitySubNavigation__RenderFunc(props: {
  variants: PlasmicActivitySubNavigation__VariantsArgs;
  args: PlasmicActivitySubNavigation__ArgsType;
  overrides: PlasmicActivitySubNavigation__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswYcoTSnfjowKk()
  });

  return (
    (
      hasVariant(variants, "noSubNavigation", "noSubNavigation") ? true : true
    ) ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [sty.rootnoSubNavigation]: hasVariant(
              variants,
              "noSubNavigation",
              "noSubNavigation"
            )
          }
        )}
      >
        <div
          data-plasmic-name={"subNavBar"}
          data-plasmic-override={overrides.subNavBar}
          className={classNames(projectcss.all, sty.subNavBar, {
            [sty.subNavBaradminUserView]: hasVariant(
              variants,
              "adminUserView",
              "adminUserView"
            ),
            [sty.subNavBarnoSubNavigation]: hasVariant(
              variants,
              "noSubNavigation",
              "noSubNavigation"
            )
          })}
        >
          <p.PlasmicLink
            className={classNames(projectcss.all, projectcss.a, sty.link__zu7, {
              [sty.linkdiscussionsDeactivated__zu7Y8You]: hasVariant(
                variants,
                "discussionsDeactivated",
                "discussionsDeactivated"
              )
            })}
            component={Link}
            platform={"nextjs"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ohXfo)}>
              <div className={classNames(projectcss.all, sty.freeBox__m7Ety)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Details",
                  value: args.children,
                  className: classNames(sty.slotTargetChildren)
                })}
              </div>
            </div>
          </p.PlasmicLink>

          {(
            hasVariant(
              variants,
              "discussionsDeactivated",
              "discussionsDeactivated"
            )
              ? true
              : true
          ) ? (
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__q5MXj,
                {
                  [sty.linkadminUserView__q5MXjaKg4]: hasVariant(
                    variants,
                    "adminUserView",
                    "adminUserView"
                  ),
                  [sty.linkdiscussionsDeactivated__q5MXjy8You]: hasVariant(
                    variants,
                    "discussionsDeactivated",
                    "discussionsDeactivated"
                  )
                }
              )}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__xc7S3, {
                  [sty.freeBoxadminUserView__xc7S3AKg4]: hasVariant(
                    variants,
                    "adminUserView",
                    "adminUserView"
                  ),
                  [sty.freeBoxdiscussionsDeactivated__xc7S3Y8You]: hasVariant(
                    variants,
                    "discussionsDeactivated",
                    "discussionsDeactivated"
                  )
                })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__deeaA)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "Discussions",
                    value: args.slot,
                    className: classNames(sty.slotTargetSlot)
                  })}
                </div>
              </div>
            </p.PlasmicLink>
          ) : null}
          {(
            hasVariant(variants, "adminUserView", "adminUserView")
              ? true
              : false
          ) ? (
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__ktHXa,
                {
                  [sty.linkadminUserView__ktHXaAKg4]: hasVariant(
                    variants,
                    "adminUserView",
                    "adminUserView"
                  )
                }
              )}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__r4P5T, {
                  [sty.freeBoxadminUserView__r4P5TAKg4]: hasVariant(
                    variants,
                    "adminUserView",
                    "adminUserView"
                  )
                })}
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"Manage"}
                </div>
              </div>
            </p.PlasmicLink>
          ) : null}
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "subNavBar", "text"],
  subNavBar: ["subNavBar", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  subNavBar: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivitySubNavigation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivitySubNavigation__VariantsArgs;
    args?: PlasmicActivitySubNavigation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivitySubNavigation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicActivitySubNavigation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicActivitySubNavigation__ArgProps,
      internalVariantPropNames: PlasmicActivitySubNavigation__VariantProps
    });

    return PlasmicActivitySubNavigation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivitySubNavigation";
  } else {
    func.displayName = `PlasmicActivitySubNavigation.${nodeName}`;
  }
  return func;
}

export const PlasmicActivitySubNavigation = Object.assign(
  // Top-level PlasmicActivitySubNavigation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    subNavBar: makeNodeComponent("subNavBar"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicActivitySubNavigation
    internalVariantProps: PlasmicActivitySubNavigation__VariantProps,
    internalArgProps: PlasmicActivitySubNavigation__ArgProps
  }
);

export default PlasmicActivitySubNavigation;
/* prettier-ignore-end */
